import SwiftUI
import MapKit
import WebKit

// Restaurant model
struct Restaurant: Identifiable {
    let id = UUID()
    let name: String
    let url: String
}

// Main App struct
@main
struct FoodFinderApp: App {
    var body: some Scene {
        WindowGroup {
            WelcomeView()
        }
    }
}


struct TermsAndConditionsView: View {
    @State private var isAgreed = false

    var body: some View {
        VStack {
            Text("Terms and Conditions")
                .font(.title)
                .padding()

            ScrollView {
                Text("Here are the terms and conditions...")
                    .padding()
            }

            Toggle("I agree to the terms and conditions", isOn: $isAgreed)
                .padding()

            NavigationLink(destination: PreferencesView(), isActive: $isAgreed) {
                EmptyView()
            }

            Button(action: {
                if isAgreed {
                    isAgreed = true
                }
            }) {
                Text("Agree")
                    .foregroundColor(.white)
                    .padding()
                    .background(isAgreed ? Color.blue : Color.gray)
                    .cornerRadius(10)
            }
            .padding()
            .disabled(!isAgreed)

            Spacer()
        }
        .navigationTitle("Terms and Conditions")
        .padding()
    }
}
struct SettingsView: View {
    @State private var location: String = "ORLANDO, FL"
    @State private var profileName: String = "Joe Dirt"
    @State private var fontSize: String = "Regular"
    @State private var allergies: String = "Peanuts"
    @State private var showingDeleteAlert = false

    let fontSizes = ["Small", "Regular", "Large"]

    var body: some View {
        NavigationView {
            VStack {
                Form {
                    Section(header: Text("Profile")) {
                        TextField("Location", text: $location)
                            .padding()
                        TextField("Profile Name", text: $profileName)
                            .padding()
                        Picker("Font size", selection: $fontSize) {
                            ForEach(fontSizes, id: \.self) {
                                Text($0)
                            }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                        .padding()
                        TextField("Allergies", text: $allergies)
                            .padding()
                    }

                    Section {
                        Button(action: {
                            showingDeleteAlert = true
                        }) {
                            Text("Delete Profile")
                                .foregroundColor(.red)
                        }
                        .alert(isPresented: $showingDeleteAlert) {
                            Alert(
                                title: Text("Delete Profile"),
                                message: Text("Are you sure you want to delete your profile? This action cannot be undone."),
                                primaryButton: .destructive(Text("Delete")) {
                                    // Handle profile deletion here
                                },
                                secondaryButton: .cancel()
                            )
                        }
                    }
                }
            }
            .navigationTitle("Settings")
        }
    }
}

// WelcomeView - Entry point for the app, offers sign up and sign in options
struct WelcomeView: View {
    var body: some View {
        NavigationView {
            VStack {
                Image(systemName: "fork.knife")
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(width: 100, height: 100)
                    .foregroundColor(.blue)
                
                Text("Welcome to Food Finder!")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding()
                
               
                NavigationLink(destination: SignupView()) {
                    Text("Create Account")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(10)
                }
                .padding()
                
                NavigationLink(destination: SigninView()) {
                    Text("Sign In")
                        .foregroundColor(.blue)
                        .padding()
                        .overlay(
                            RoundedRectangle(cornerRadius: 10)
                                .stroke(Color.blue, lineWidth: 1)
                        )
                }
                .padding()
                
                Spacer()
            }
            .navigationTitle("Welcome")
            .padding()
        }
    }
}

// ContentView - Lists restaurants and navigates to WebView
struct ContentView: View {
    let restaurants = [
        Restaurant(name: "Pizza Place", url: "https://www.papajohns.com/"),
        Restaurant(name: "Sushi Spot", url: "https://www.sushispot.com"),
        Restaurant(name: "Burger Joint", url: "https://bethsburgerbar.com/")
    ]

    var body: some View {
        NavigationView {
            List(restaurants) { restaurant in
                NavigationLink(destination: WebView(url: restaurant.url)) {
                    Text(restaurant.name)
                }
            }
            .navigationTitle("Restaurants")
        }
    }
}

// WebView - Displays the restaurant's website
struct WebView: View {
    let url: String

    var body: some View {
        WebViewWrapper(url: URL(string: url)!)
            .navigationBarTitleDisplayMode(.inline)
    }
}

// WebViewWrapper - Integrates WKWebView to display web content
struct WebViewWrapper: UIViewRepresentable {
    let url: URL

    func makeUIView(context: Context) -> WKWebView {
        let webView = WKWebView()
        webView.load(URLRequest(url: url))
        return webView
    }

    func updateUIView(_ uiView: WKWebView, context: Context) {
        
    }
}

// SignupView - Allows user to sign up with basic details
struct SignupView: View {
    @State private var firstName: String = ""
    @State private var lastName: String = ""
    @State private var age: String = ""
    @State private var email: String = ""
    @State private var isSignupComplete = false
    @State private var isAgeValid = true

    var isFormValid: Bool {
        return !firstName.isEmpty && !lastName.isEmpty && isAgeValid && !email.isEmpty
    }

    var body: some View {
        VStack {
            TextField("First Name", text: $firstName)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            TextField("Last Name", text: $lastName)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            TextField("Age", text: $age)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .keyboardType(.numberPad)
                .padding()
                .background(isAgeValid ? Color.white : Color.red.opacity(0.3))
                .onChange(of: age) { newValue in
                    if let ageInt = Int(newValue), ageInt < 16 {
                        isAgeValid = false
                    } else {
                        isAgeValid = true
                    }
                }

            TextField("Email", text: $email)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()
                .disabled(!isAgeValid)

            Button(action: {
                if isFormValid {
                    isSignupComplete = true
                }
            }) {
                Text("Sign Up")
                    .foregroundColor(.white)
                    .padding()
                    .background(isFormValid ? Color.blue : Color.gray)
                    .cornerRadius(10)
            }
            .padding()

            if isSignupComplete {
                Text("Profile created successfully. Check your email for confirmation.")
                    .foregroundColor(.green)
                    .padding()
            }

            Spacer()
        }
        .navigationTitle("Sign Up")
        .padding()
    }
}

// SigninView - Allows user to sign in with username and password
struct SigninView: View {
    @State private var username: String = ""
    @State private var password: String = ""
    @State private var isSignedIn = false

    var isFormValid: Bool {
        return !username.isEmpty && !password.isEmpty
    }

    var body: some View {
        VStack {
            TextField("Username", text: $username)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            SecureField("Password", text: $password)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            Button(action: {
                if isFormValid {
                    // Perform sign-in logic (authentication)
                    isSignedIn = true
                }
            }) {
                Text("Sign In")
                    .foregroundColor(.white)
                    .padding()
                    .background(isFormValid ? Color.blue : Color.gray)
                    .cornerRadius(10)
            }
            .padding()

            if isSignedIn {
                NavigationLink(destination: PreferencesView()) {
                    Text("Go to Preferences")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.green)
                        .cornerRadius(10)
                }
                .padding()
            }

            Spacer()
        }
        .navigationTitle("Sign In")
        .padding()
    }
}

// PreferencesView - Allows user to set preferences like budget, cuisine type, and allergies
struct PreferencesView: View {
    @State private var budget: Double = 0
    @State private var cuisineType: String = ""
    @State private var selectedAllergy = ""
    @State private var isFoodNearby = false
    
    let allergies = ["Gluten", "Dairy", "Eggs", "Soy", "Shellfish", "Peanuts", "Tree Nuts", "Fish"]

    var body: some View {
        VStack {
            Form {
                Section(header: Text("Preferences").foregroundColor(.blue)) {
                    Stepper("Budget: $\(String(format: "%.2f", budget))", value: $budget, in: 0...100, step: 5)
                        .padding()
                        .background(RoundedRectangle(cornerRadius: 10).fill(Color.gray.opacity(0.1)))
                    TextField("Cuisine Type", text: $cuisineType)
                        .padding()
                        .background(RoundedRectangle(cornerRadius: 10).fill(Color.gray.opacity(0.1)))
                    Picker("Allergies", selection: $selectedAllergy) {
                        ForEach(allergies, id: \.self) { allergy in
                            Text(allergy)
                        }
                    }
                    .pickerStyle(MenuPickerStyle())
                }

                Button(action: {
                    isFoodNearby = true
                }) {
                    Text("Food Near Me")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(10)
                }
                .padding()
                .frame(maxWidth: .infinity)
            }

            if isFoodNearby {
                NavigationLink(destination: MapView()) {
                    Text("View Map")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.green)
                        .cornerRadius(10)
                }
                .padding()
            }
        }
        .navigationTitle("Preferences")
        .padding()
    }
}

// MapView - Displays a map with search functionality and nearby restaurants
struct MapView: View {
    @Environment(\.presentationMode) var presentationMode: Binding<PresentationMode>
    @State private var searchQuery = ""
    @State private var region = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194),
        span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
    )
    @State private var locations: [IdentifiablePointAnnotation] = []
    @State private var showRestaurantsButton = false
    @State private var restaurants: [Restaurant] = []

    var body: some View {
        VStack {
            HStack {
                Button(action: {
                    // Back action
                    presentationMode.wrappedValue.dismiss()
                }) {
                    Image(systemName: "arrow.left")
                        .padding()
                }
                Spacer()
                Text("Find a Location")
                    .font(.headline)
                Spacer()
                NavigationLink(destination: WelcomeView()) {
                    Image(systemName: "house")
                        .padding()
                }
            }
            .padding()
            HStack {
                TextField("Search by zip code", text: $searchQuery, onCommit: {
                    performSearch()
                })
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()
            }
            Map(coordinateRegion: $region, annotationItems: locations) { location in
                MapPin(coordinate: location.annotation.coordinate)
            }
            .edgesIgnoringSafeArea(.all)
            if showRestaurantsButton {
                Button(action: {
                    fetchRestaurants()
                }) {
                    Text("Restaurants")
                        .foregroundColor(.white)
                        .padding()
                        .background(Color.blue)
                        .cornerRadius(10)
                        .padding()
                }
            }
            List(restaurants) { restaurant in
                Button(action: {
                    if let url = URL(string: restaurant.url) {
                        UIApplication.shared.open(url)
                    }
                }) {
                    HStack {
                        Text(restaurant.name)
                        Spacer()
                        Text("Visit Website")
                            .foregroundColor(.blue)
                    }
                }
            }
        }
        .onAppear {
            // Perform initial setup or data loading if needed
        }
        .navigationTitle("Map")
        .padding()
    }

    
    private func performSearch() {
        let geocoder = CLGeocoder()
        geocoder.geocodeAddressString(searchQuery) { (placemarks, error) in
            guard let placemark = placemarks?.first, let location = placemark.location else { return }
            let annotation = MKPointAnnotation()
            annotation.coordinate = location.coordinate
            annotation.title = placemark.name
            let identifiableAnnotation = IdentifiablePointAnnotation(annotation: annotation)
            locations = [identifiableAnnotation]
            region.center = location.coordinate
            showRestaurantsButton = true
        }
    }

    private func fetchRestaurants() {
        // Here, we integrating with an API to fetch restaurants based on the region center.
        // For demonstration purposes, we'll use mock data.
        let mockRestaurants = [
            Restaurant(name: "Pizza Place", url: "https://www.papajohns.com/"),
            Restaurant(name: "Sushi Spot", url: "https://www.sushispot.com"),
            Restaurant(name: "Burger Joint", url: "https://bethsburgerbar.com/")
        ]
        restaurants = mockRestaurants
    }
}

// IdentifiablePointAnnotation - Wrapper for MKPointAnnotation to make it Identifiable
struct IdentifiablePointAnnotation: Identifiable {
    let id = UUID()
    let annotation: MKPointAnnotation
}


// Preview Provider
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
